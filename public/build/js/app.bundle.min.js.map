{"version":3,"names":[],"mappings":"","sources":["app.bundle.min.js"],"sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){\n\"use strict\";\n\nvar _proceduralCity = require(\"./scenes/proceduralCity\");\n\nwindow.onload = _proceduralCity.proceduralCity; /*\n                                                 * ---------------------------------------------------------------------------------------\n                                                 * app.js\n                                                 * ---------------------------------------------------------------------------------------\n                                                 */\n\n},{\"./scenes/proceduralCity\":2}],2:[function(require,module,exports){\n/*\n * ---------------------------------------------------------------------------------------\n * proceduralCity\n * ---------------------------------------------------------------------------------------\n */\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar proceduralCity = function proceduralCity() {\n    var T = THREE;\n\n    var webglContainer = void 0,\n        width = void 0,\n        height = void 0,\n        renderer = void 0,\n        camera = void 0,\n        scene = void 0,\n        clock = void 0,\n        orbitCtrls = void 0,\n        firstPersonCtrls = void 0,\n        loadingManager = void 0,\n        isMobile = void 0;\n\n    function detectMobile() {\n        return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n        );\n    }\n\n    function init() {\n        isMobile = detectMobile();\n\n        webglContainer = document.getElementById(\"webglContainer\");\n        width = webglContainer.offsetWidth;\n        height = webglContainer.offsetHeight;\n\n        // init loadingManager\n        loadingManager = new T.LoadingManager();\n        loadingManager.onLoad = function () {\n            console.log(\"[LoadingManager]\", \"All load!\");\n            document.getElementById(\"loading\").style.display = \"none\";\n            setTimeout(function () {\n                initInfo();\n                render();\n            }, 10);\n        };\n        loadingManager.onProgress = function (url, itemsLoaded, itemsTotal) {\n            // console.log(url, itemsLoaded, itemsTotal)\n        };\n\n        // init renderer\n        renderer = new T.WebGLRenderer({ alpha: true, antialias: true });\n        renderer.setSize(width, height);\n        webglContainer.appendChild(renderer.domElement);\n\n        // init camera\n        camera = new T.PerspectiveCamera(45, width / height, 0.1, 8000);\n        camera.position.set(-576.5, 75, -109);\n        camera.lookAt(1000, 100, 0);\n\n        // init scene\n        scene = new T.Scene();\n        scene.fog = new T.FogExp2(0xd0e0f0, 0.0007);\n\n        // axes helper\n        var axesHelper = new T.AxesHelper(20);\n        // scene.add(axesHelper);\n\n        // light\n        var light = new T.HemisphereLight(0xfffff0, 0x101020, 1.25);\n        light.position.set(0.75, 1, 0.25);\n        scene.add(light);\n\n        // controls\n        if (isMobile) {\n            orbitCtrls = new T.OrbitControls(camera);\n        } else {\n            firstPersonCtrls = new T.FirstPersonControls(camera);\n            firstPersonCtrls.movementSpeed = 80;\n            firstPersonCtrls.lookSpeed = 0.08;\n            firstPersonCtrls.lookVertical = true;\n        }\n\n        // clock\n        clock = new T.Clock();\n\n        generateSkyBox();\n        generateStarsPlane();\n        generateCity(12000);\n        window.addEventListener(\"resize\", onWindowResize, false);\n    }\n\n    function generateCity(n) {\n\n        var cityGeometry = new T.Geometry();\n\n        var geometry = new T.BoxGeometry(1, 1, 1);\n        // change pivot from center to bottom of the cube\n        geometry.applyMatrix(new T.Matrix4().makeTranslation(0, 0.5, 0));\n\n        // remove bottom side, because we will look from up to bottom\n        geometry.faces.splice(6, 2);\n        geometry.faceVertexUvs[0].splice(6, 2);\n\n        // uv mapping modified for top side\n        geometry.faceVertexUvs[0][4][0].set(0, 0);\n        geometry.faceVertexUvs[0][4][1].set(0, 0);\n        geometry.faceVertexUvs[0][4][2].set(0, 0);\n        geometry.faceVertexUvs[0][5][0].set(0, 0);\n        geometry.faceVertexUvs[0][5][1].set(0, 0);\n        geometry.faceVertexUvs[0][5][2].set(0, 0);\n\n        // building top/bottom colors\n        var light = new T.Color(0x1050ff);\n        var shadow = new T.Color(0x303050);\n        var value = 1 - Math.random() * Math.random();\n        var baseColor = new T.Color().setRGB(value + Math.random() * 0.1, value, value + Math.random() * 0.1);\n        var topColor = baseColor.clone().multiply(light);\n        var bottomColor = baseColor.clone().multiply(shadow);\n\n        for (var i = 0; i < n; i++) {\n            cityGeometry.mergeMesh(generateBuilding(geometry.clone(), topColor, bottomColor));\n        }\n\n        var texture = new T.Texture(generateTexture());\n        texture.anisotropy = renderer.capabilities.getMaxAnisotropy();\n        texture.needsUpdate = true;\n\n        var cityMesh = new T.Mesh(cityGeometry, new T.MeshBasicMaterial({ vertexColors: T.VertexColors, map: texture }));\n        scene.add(cityMesh);\n    }\n\n    function generateBuilding(geometry, topColor, bottomColor) {\n\n        var sign = Math.round(Math.random()) * 2 - 1;\n        var rndV = sign * Math.random() * Math.random() * Math.random() * Math.random() * 0.05;\n        topColor.r = clamp(topColor.r + rndV);\n        // bottomColor.r = clamp(bottomColor.r + rndV * 0.1);\n\n\n        geometry.faces[0].vertexColors = geometry.faces[2].vertexColors = geometry.faces[6].vertexColors = geometry.faces[8].vertexColors = [topColor, bottomColor, topColor];\n\n        geometry.faces[1].vertexColors = geometry.faces[3].vertexColors = geometry.faces[7].vertexColors = geometry.faces[9].vertexColors = [bottomColor, bottomColor, topColor];\n\n        geometry.faces[4].vertexColors = geometry.faces[5].vertexColors = [topColor, topColor, topColor];\n\n        var mesh = new T.Mesh(geometry);\n\n        mesh.position.x = Math.floor(Math.random() * 200 - 100) * 20;\n        mesh.position.z = Math.floor(Math.random() * 200 - 100) * 20;\n        mesh.rotation.y = Math.random() * Math.random() < 0.5 ? Math.PI * 0.25 : 0;\n        mesh.scale.x = Math.random() * Math.random() * Math.random() * Math.random() * 50 + 10;\n        mesh.scale.z = mesh.scale.x;\n        mesh.scale.y = Math.random() * Math.random() * Math.random() * mesh.scale.x * 8 + 8;\n\n        return mesh;\n    }\n\n    function clamp(v) {\n        if (v < 0) return 0;else if (v > 1) return 1;else return v;\n    }\n\n    function generateTexture() {\n\n        var canvas = document.createElement('canvas');\n        canvas.width = 32;\n        canvas.height = 64;\n\n        var context = canvas.getContext('2d');\n        context.fillStyle = '#ffffff';\n        context.fillRect(0, 0, 32, 64);\n\n        for (var y = 2; y < 64; y += 2) {\n            for (var x = 0; x < 32; x += 2) {\n                var value = Math.floor(Math.random() * 64);\n                context.fillStyle = 'rgb(' + [value, value, value].join(',') + ')';\n                context.fillRect(x, y, 2, 1);\n            }\n        }\n\n        var canvas2 = document.createElement('canvas');\n        canvas2.width = 512;\n        canvas2.height = 1024;\n\n        context = canvas2.getContext('2d');\n        context.imageSmoothingEnabled = false;\n        context.webkitImageSmoothingEnabled = false;\n        context.mozImageSmoothingEnabled = false;\n        context.drawImage(canvas, 0, 0, canvas2.width, canvas2.height);\n\n        return canvas2;\n    }\n\n    function generateSkyBox() {\n        var loader = new T.CubeTextureLoader(loadingManager);\n\n        var textures = [\"app/assets/textures/blue/bkg1_right.png\", \"app/assets/textures/blue/bkg1_left.png\", \"app/assets/textures/blue/bkg1_top.png\", \"app/assets/textures/blue/bkg1_bot.png\", \"app/assets/textures/blue/bkg1_front.png\", \"app/assets/textures/blue/bkg1_back.png\"];\n\n        var textureCube = loader.load(textures);\n        var shader = T.ShaderLib[\"cube\"];\n        shader.uniforms[\"tCube\"].value = textureCube;\n        var skyMaterial = new T.ShaderMaterial({\n            fragmentShader: shader.fragmentShader,\n            vertexShader: shader.vertexShader,\n            uniforms: shader.uniforms,\n            depthWrite: false,\n            side: T.BackSide\n        });\n        skyMaterial.needsUpdate = true;\n\n        var skyGeometry = new T.BoxGeometry(6000, 6000, 6000, 1, 1, 1);\n        var skyBox = new T.Mesh(skyGeometry, skyMaterial);\n        scene.add(skyBox);\n    }\n\n    function generateStarsPlane() {\n        var loader = new T.CubeTextureLoader(loadingManager);\n\n        var textures = [\"app/assets/textures/lightblue/right.png\", \"app/assets/textures/lightblue/left.png\", \"app/assets/textures/lightblue/top.png\", \"app/assets/textures/lightblue/bot.png\", \"app/assets/textures/lightblue/front.png\", \"app/assets/textures/lightblue/back.png\"];\n\n        var planeMaterial = new T.MeshBasicMaterial({\n            color: 0xffffff,\n            envMap: loader.load(textures),\n            transparent: true,\n            opacity: 0.5,\n            blending: T.AdditiveBlending,\n            side: T.DoubleSide\n        });\n\n        var plane = new T.Mesh(new T.PlaneGeometry(4000, 4000), planeMaterial);\n        plane.rotation.x = -90 * Math.PI / 180;\n        scene.add(plane);\n    }\n\n    function initInfo() {\n        var info = document.getElementById(\"info\");\n        if (isMobile) {\n            info.innerText = \"Drag to look around. Pin to zoom.\";\n        } else {\n            info.innerText = \"Move mouse to look around; click & hold or arrow keys to move.\";\n        }\n        info.style.display = \"block\";\n    }\n\n    function onWindowResize(event) {\n        width = webglContainer.offsetWidth;\n        height = webglContainer.offsetHeight;\n        renderer.setSize(width, height);\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n    }\n\n    function render() {\n        if (isMobile) {\n            orbitCtrls.update();\n        } else {\n            firstPersonCtrls.update(clock.getDelta());\n        }\n        renderer.render(scene, camera);\n        requestAnimationFrame(render);\n    }\n\n    // start scene\n    init();\n};\n\nexports.proceduralCity = proceduralCity;\n\n},{}]},{},[1]);\n"],"file":"app.bundle.min.js"}